import re
import pymongo

import operator
import os
import pandas as pd
from enum import Enum
from string_compare import *
import openai_cve_tester

ops = {
    '<' : operator.lt,
    '<=' : operator.le,
    '>' : operator.gt,
    '>=' : operator.ge,  # use operator.div for Python 2
    '=' : operator.eq,
    '==' : operator.eq,
}

class ItemType(Enum):
    OPERATOR = 'operator'
    VERSION = 'version'
    ALL = 'all'
    
class ComparatorType(Enum):
    HEURISTIC = 'HEURISTIC'
    OPENAIDB = 'OPENAI_USING_DB'
    OPENAIFULL = 'OPENAI_FULL'

def analyzeManifest(versionModule, cveManifest):
    if type(cveManifest) == list:
        cveManifest = ' '.join(cveManifest)
    versionModule = versionModule.lower()
    cveManifest  = cveManifest.lower()
    cveManifest = checkVersionString(cveManifest)
    cveManifest = cveManifest.split()
    cveManifest, manifestType = identifyElements(cveManifest)
    vulnerable = checkVulnerability(cveManifest, manifestType, versionModule)
    return vulnerable
    
def compareVersions(cveManifest, versionModule, directCompare=True):
    vulnerable = False
    if not directCompare:
        vulnerable = compareCompleteManifest(cveManifest, versionModule)
    else:
        vulnerable = compareEqVersions(cveManifest, versionModule)
    return vulnerable

def compare(operator, cveVersion, moduleVersion):
    return ops[operator](moduleVersion, cveVersion)

def compareEqVersions(cveManifest, versionModule):
    vulnerable = False
    for item in cveManifest:
        if item["tag"] == ItemType.VERSION.value:
            currentVersion = item["item"].replace(" ", "")
            vulnerable = vulnerable or operator.eq(currentVersion, versionModule.replace(" ", ""))
    return vulnerable

def compareCompleteManifest(cveManifest, versionModule):
    operatorReady = None
    vulnerable = False
    firstTime = True
    for idx, item in enumerate(cveManifest):
        if item["tag"] == ItemType.OPERATOR.value:
            operatorReady = item["item"]
        elif item["tag"] == ItemType.VERSION.value and operatorReady:
            if firstTime:
                vulnerable = True
                firstTime = False
            currentVersion = item["item"].replace(" ", "")
            vulnerable = vulnerable and compare(operatorReady.replace(" ", ""), currentVersion, versionModule.replace(" ", ""))
            operatorReady = None
        elif item["tag"] == ItemType.ALL.value and operatorReady:
            vulnerable = True
    return vulnerable

def checkVersionString(version):
    operator = ''
    isValid = False
    currentOperatorIdx = 0
    for idx, letter in enumerate(version):
        if letter == '<' or letter == '>' or letter == '=':
            operator = operator + letter
            currentOperatorIdx = currentOperatorIdx + 1
        elif letter == ' ' and operator != '':
            break
        elif letter != ' ' and operator !='':
            isValid = True
            # print("Detected String Error", version)
            break
    res = operator + ' ' + version[idx:]
    if not isValid:
        res = version
    # print("operator ",operator)
    # print("res ", res)
    return res
 
def checkVulnerability(cveManifest, manifestType, versionModule):
    vulnerable = False
    if manifestType == ItemType.ALL:
        # print("All Versions")
        vulnerable = True
    elif manifestType == ItemType.VERSION:
        # print("Versions equal")
        vulnerable = compareVersions(cveManifest, versionModule)
    elif manifestType == ItemType.OPERATOR:
        # print("Versions operator")
        vulnerable = compareVersions(cveManifest, versionModule, directCompare=False)
    return vulnerable

def identifyElements(cveManifest):
    cveManifestTag = []
    manifestType = ItemType.ALL
    for item in cveManifest:
        if re.match("[<><=>=]", item):
            cveManifestTag.append({"item": item, "tag": ItemType.OPERATOR.value})
            manifestType = ItemType.OPERATOR
        elif re.match(".*[0-9].*", item):
            cveManifestTag.append({"item": item, "tag": ItemType.VERSION.value})
            if manifestType != ItemType.OPERATOR:
                manifestType = ItemType.VERSION
        else:
            cveManifestTag.append({"item": item, "tag": ItemType.ALL.value})
    return cveManifestTag, manifestType
        
    
def getCvesMatchModule(module, databaseName):
    myclient = pymongo.MongoClient("mongodb+srv://afelipevargasr:9TC5hlN9CdC3czP6@cluster0.lrohl7y.mongodb.net/?retryWrites=true&w=majority")
    mydb = myclient["cve_simplifications"]
    mycol = mydb[databaseName]
    myquery = { "vulnerable_versions.module": { "$regex": "(?i)" + module } }
    cves = mycol.find()
    return cves

def analyzeEachModule(cve, module, version, tolerationRate):
    vulnerable = False
    for item in cve["vulnerable_versions"]:
        matchRatio = compare_string(item["module"].lower(), module, AlgorithmType.MATCHER)
        matchRatioL = compare_string(item["module"].lower(), module, AlgorithmType.LEVENSHTEIN)
        matchRatioC = compare_string(item["module"].lower(), module, AlgorithmType.COSINE)
        print(cve["CVE_ID"])
        print("MATCHER ",matchRatio)
        print("LEVENSHTEIN ",matchRatioL)
        print("COSINE ",matchRatioC)
        if matchRatioC >= tolerationRate:
            print("tested version ",version)
            print("module version ",item["versions"])
            isModuleVulnerable = analyzeManifest(version, item["versions"])
            print("isModuleVulnerable ",isModuleVulnerable)
            vulnerable = vulnerable or isModuleVulnerable
    return vulnerable

def executeAnalyzeModules(cve, module, version, tolerationRate,comparator):
    vulnerable = False
    if comparator == ComparatorType.HEURISTIC:
        vulnerable = analyzeEachModule(cve, module, version, tolerationRate)
    elif comparator == ComparatorType.OPENAIDB:
        vulnerable = openai_cve_tester.check_database(
            cve["CVE_ID"],
            module,version,
            openai_cve_tester.ComparationType.VERSIONS,
            cve["vulnerable_versions"])
    elif comparator == ComparatorType.OPENAIFULL:
        vulnerable = openai_cve_tester.check_database(
            cve["CVE_ID"],
            module,version,
            openai_cve_tester.ComparationType.DESCRIPTION)
    return vulnerable

def analyzeVulnerabilities(module, version, databaseName, tolerationRate, comparator):
    module = module.lower()
    version = version.lower()
    cves = getCvesMatchModule(module, databaseName)
    cvesVulnerable = []
    for cve in cves:
        print(cve["CVE_ID"])
        vulnerable = executeAnalyzeModules(cve, module, version, tolerationRate, comparator)
        if vulnerable:
            cvesVulnerable.append(cve["CVE_ID"])
    # print(len(cvesVulnerable), " ", " CVEs detected")
    return cvesVulnerable

def checkModule(module, version, realVulnerabilities, database, comparator):
    db = database["db"]
    tolerance = database["tolerance"]
    # print("tolerance ", tolerance)
    vulnerabilities = analyzeVulnerabilities(module, version, db, tolerance,comparator)
    passComparison = (realVulnerabilities == len(vulnerabilities))
    similarity = 0
    if passComparison:
        similarity = 100
    elif not passComparison and realVulnerabilities == 0:
        similarity = 0  
    elif realVulnerabilities != 0:
        similarity = len(vulnerabilities)*100/realVulnerabilities
        if realVulnerabilities < len(vulnerabilities):
            similarity = similarity * -1
            
    
    res = { 
            "db": database,
            "tolerance": tolerance,
            "module": module, 
            "version": version, 
            "realVulnerabilities": realVulnerabilities,
            "dbVulnerabilitiesLen": len(vulnerabilities),
            "dbVulnerabilities": vulnerabilities,
            "passComparison": passComparison,
            "similarity": similarity
    }
    return res
    

def runBulkModuleExperiment(modules, database, comparator):
    comparisonResults = pd.DataFrame(columns=['db',
                                              'module',
                                              'tolerance',
                                              'version',
                                              'realVulnerabilities',
                                              'dbVulnerabilitiesLen',
                                              'dbVulnerabilities',
                                              'passComparison',
                                              'similarity'])
    for index, module in modules.iterrows():
        moduleRes = checkModule(module["module"], module["version"], module["vulnerableCVES"], database, comparator)
        comparisonResults.loc[len(comparisonResults)] = moduleRes
    return comparisonResults

def resultsAnalyzis(databaseExperiment):
    totalModules = len(databaseExperiment)
    passModules = len(databaseExperiment[databaseExperiment["passComparison"]==True])
    failModules = len(databaseExperiment[databaseExperiment["passComparison"]==False])
    passRate = passModules/totalModules
    failRate = failModules/totalModules
    similarityMean = databaseExperiment[["similarity"]].mean()
    print("passRate: ", passRate)
    print("failRate: ", failRate)
    print("similarityMean: ", similarityMean)
    return passRate, failRate, similarityMean

def readExperimentConfiguration(outdir,configFile, experiment, comparator=ComparatorType.HEURISTIC):
    modules = pd.read_csv(configFile)
    databases = [
        {"db": "database-human-1", "tolerance": 0.95},
        # {"db": "database-openai-2", "tolerance": 0.96 },
        # {"db": "database-heuristic-4", "tolerance": 0.62 }
    ]
    print("---------------------------------------------")
    for database in databases:
        passRate = 0
        tolerance = 0
        for tol in range(int(database["tolerance"]*100),100,10):
            database["tolerance"] = tol/100
            tempDir = outdir + '/' + database["db"]
            print("Analyzing ", database["db"]," with tolerance: ", tol)
            result = runBulkModuleExperiment(modules, database, comparator)
            if not os.path.exists(tempDir):
                os.mkdir(tempDir)
            fullname = os.path.join(tempDir, experiment + '-' + str(tol) + '.csv')    
            result.to_csv(fullname)
            currentPass, failRate, similarityMean = resultsAnalyzis(result)
            if passRate < currentPass:
                print("New best tolerance ", tol)
                passRate = currentPass 
                tolerance = tol
        print("Best Tolerance: ", tolerance)
        print("Best Rate: ", passRate)
 
 
readExperimentConfiguration('results/comparison', "experiment_03_modules.csv","experiment-openaifull-2",ComparatorType.OPENAIFULL)
readExperimentConfiguration('results/comparison', "experiment_03_modules.csv","experiment-openaifull-2",ComparatorType.OPENAIDB)