import re
import pymongo
from difflib import SequenceMatcher
import operator
from enum import Enum


ops = {
    '<' : operator.lt,
    '<=' : operator.le,
    '>' : operator.gt,
    '>=' : operator.ge,  # use operator.div for Python 2
    '=' : operator.eq,
    '==' : operator.eq,
}

class ItemType(Enum):
    OPERATOR = 'operator'
    VERSION = 'version'
    ALL = 'all'

def analyzeManifest(versionModule, cveManifest):
    if type(cveManifest) == list:
        cveManifest = cveManifest[0]
    versionModule = versionModule.lower()
    cveManifest  = cveManifest.lower()
    cveManifest = cveManifest.split()
    cveManifest, manifestType = identifyElements(cveManifest)
    vulnerable = checkVulnerability(cveManifest, manifestType, versionModule)
    return vulnerable
    
def compareVersions(cveManifest, versionModule, directCompare=True):
    vulnerable = False
    if not directCompare:
        vulnerable = compareCompleteManifest(cveManifest, versionModule)
    else:
        vulnerable = compareEqVersions(cveManifest, versionModule)
    return vulnerable

def compare(operator, cveVersion, moduleVersion):
    # print("Operator ",operator)
    # print("cveVersion ",cveVersion)
    # print("moduleVersion ",moduleVersion)
    # print("Operator identified ", ops[operator])
    return ops[operator](moduleVersion, cveVersion)

def compareEqVersions(cveManifest, versionModule):
    vulnerable = False
    firstTime = True
    for item in cveManifest:
        if firstTime:
                vulnerable = True
                firstTime = False
        if item["tag"] == ItemType.VERSION.value:
            vulnerable = vulnerable or operator.eq(item["item"],versionModule)
    return vulnerable

def compareCompleteManifest(cveManifest, versionModule):
    operatorReady = None
    vulnerable = False
    firstTime = True
    for idx, item in enumerate(cveManifest):
        if item["tag"] == ItemType.OPERATOR.value:
            operatorReady = item["item"]
        elif item["tag"] == ItemType.VERSION.value and operatorReady:
            if firstTime:
                vulnerable = True
                firstTime = False
            vulnerable = vulnerable and compare(operatorReady,item["item"],versionModule)
            operatorReady = None
    return vulnerable
            
            

def checkVulnerability(cveManifest, manifestType, versionModule):
    vulnerable = False
    if manifestType == ItemType.ALL:
        # print("All Versions")
        vulnerable = True
    elif manifestType == ItemType.VERSION:
        # print("Versions equal")
        vulnerable = compareVersions(cveManifest, versionModule)
    elif manifestType == ItemType.OPERATOR:
        # print("Versions operator")
        vulnerable = compareVersions(cveManifest, versionModule, directCompare=False)
    return vulnerable

def identifyElements(cveManifest):
    cveManifestTag = []
    manifestType = ItemType.ALL
    for item in cveManifest:
        if re.match("[<><=>=]", item):
            cveManifestTag.append({"item": item, "tag": ItemType.OPERATOR.value})
            manifestType = ItemType.OPERATOR
        elif re.match(".*[0-9].*", item):
            cveManifestTag.append({"item": item, "tag": ItemType.VERSION.value})
            if manifestType != ItemType.OPERATOR:
                manifestType = ItemType.VERSION
        else:
            cveManifestTag.append({"item": item, "tag": ItemType.ALL.value})
    return cveManifestTag, manifestType
        
    
def getCvesMatchModule(module, databaseName):
    myclient = pymongo.MongoClient("mongodb+srv://afelipevargasr:9TC5hlN9CdC3czP6@cluster0.lrohl7y.mongodb.net/?retryWrites=true&w=majority")
    mydb = myclient["cve_simplifications"]
    mycol = mydb[databaseName]
    myquery = { "vulnerable_versions.module": { "$regex": "(?i)" + module } }
    cves = mycol.find()
    return cves

def analyzeEachModule(cve, module, version):
    vulnerable = False
    for item in cve["vulnerable_versions"]:
        matchRatio = SequenceMatcher(None,item["module"].lower(), module).ratio()
        if matchRatio >= 0.6:
        # if re.match("(?i)" + module, item["module"]):
            print(cve["CVE_ID"])
            print(item["module"])
            print(matchRatio)
            vulnerable = vulnerable or analyzeManifest(version, item["versions"])
            # print(item["module"]," ", vulnerable)
    return vulnerable

def analyzeVulnerabilities(module, version, databaseName):
    module = module.lower()
    version = version.lower()
    cves = getCvesMatchModule(module, databaseName)
    cvesVulnerable = []
    for cve in cves:
        vulnerable = analyzeEachModule(cve, module, version)
        if vulnerable:
            cvesVulnerable.append(cve["CVE_ID"])
    print(len(cvesVulnerable), " ", " CVEs detected")
    return cvesVulnerable

# print(analyzeVulnerabilities("APOGEE MBC (PPC) (P2 Ethernet)", "V3.2", "database-human-1"))
# print(analyzeVulnerabilities("APOGEE MBC (PPC) (P2 Ethernet)", "V3.2", "database-openai-2"))
print(analyzeVulnerabilities("APOGEE MBC (PPC) (P2 Ethernet)", "V3.2", "database-heuristic-4"))

# print(analyzeManifest("MS_2.6.9900","MS_2.6.9900"))
# print(analyzeManifest("0.9.1","0.9.1 and 0.8.5"))
# print(analyzeManifest("V3.5.4","All versions < V3.5.5"))
# print(operator.ge("V2.3","V2.3"))