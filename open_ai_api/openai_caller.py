
import openai
import json
import pandas as pd
import numpy as np
import time
from datetime import datetime

def open_cve_list(source):
    cve_information = pd.read_csv(source, index_col=False)
    return cve_information

def call_open_api(token, cve_prompt):
    openai.api_key = token
    prompt = cve_prompt
    response = openai.Completion.create(
    engine="text-davinci-003",
    prompt=prompt,
    max_tokens=3000
    )
    generated_text = response.choices[0].text.strip()
    return generated_text

def load_prompt_text(file, cve_id, cve_description):
    with open(file) as f:
        lines = " ".join([l.rstrip("\n") for l in f]) 
        lines = lines.replace("<cve-id>", cve_id)
        lines = lines.replace("<cve-description>", cve_description)
        return lines

def clean_result(string, cve_id):
    success = True
    json_string = ""
    try:
        json_string = json.loads(string)
    except:
        print("An exception occurred parsing cve")
        success = False
        json_string = {"CVE_ID": cve_id, "vulnerable_versions": []}
    
    return json_string, success

def save_result(json_string,cve_id): 
    with open(cve_id+'.json', 'w') as f:
        json.dump(json_string, f, indent=None)

def analyze_cve():
    example_file = 'example.txt'
    database_name = 'database-03'
    source_file = 'bacnet_cve.csv'
    token = "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"
    database = {"cves":[]}
    cves_info = open_cve_list(source_file)
    for i, cve in cves_info.iterrows():
        cve_prompt = load_prompt_text(example_file, cve["CVE-ID"],cve["DESCRIPTION"]) 
        response = call_open_api(token, cve_prompt)
        clean_response, success = clean_result(response, cve["CVE-ID"])
        if success:
            database["cves"].append(clean_response)
            print("Analyzed "+ cve["CVE-ID"])
            now = datetime.now() # current date and time
            save_result(database, database_name)
        else:
            database["cves"].append(clean_response)
            save_result(database, database_name)
            print("Saving cve separatly: " + cve["CVE-ID"])
            save_result(response, cve["CVE-ID"])

analyze_cve()