
import openai
import json
import pandas as pd
import numpy as np
import time
from datetime import datetime

def open_cve_list(source):
    cve_information = pd.read_csv(source, index_col=False)
    return cve_information

def call_open_api(token, cve_prompt):
    fail = False
    generated_text = ""
    try:
        openai.api_key = token
        prompt = cve_prompt
        response = openai.Completion.create(
        engine="text-davinci-003",
        prompt=prompt,
        max_tokens=3000
        )
        generated_text = response.choices[0].text.strip()
    except Exception as e:
        retry_time = 2
        print(f"Error {e}. Retrying in {retry_time} seconds...")
        time.sleep(retry_time)
        return call_open_api(token, cve_prompt)

    return generated_text, fail

def load_prompt_text(file, cve_id, cve_description):
    with open(file) as f:
        lines = " ".join([l.rstrip("\n") for l in f]) 
        lines = lines.replace("<cve-id>", cve_id)
        lines = lines.replace("<cve-description>", cve_description)
        return lines

def clean_result(string, cve_id):
    success = True
    json_string = ""
    try:
        json_string = json.loads(string)
    except:
        print("An exception occurred parsing cve")
        success = False
        json_string = {"CVE_ID": cve_id, "vulnerable_versions": []}
    
    return json_string, success

def save_result(json_string,cve_id): 
    with open(cve_id+'.json', 'w') as f:
        json.dump(json_string, f, indent=None)


def analyze_cve(token, cve_prompt, cve, database, database_name, attemp):
    response, fail = call_open_api(token, cve_prompt)
    clean_response, success = clean_result(response, cve["CVE-ID"])
    if success:
        database["cves"].append(clean_response)
        print("Analyzed "+ cve["CVE-ID"])
        save_result(database, database_name)
    else:
        if attemp < 2:
            print("Retrying cve " + cve["CVE-ID"])
            analyze_cve(token, cve_prompt, cve, database, database_name, attemp + 1)
        else:
            print("Abort cve " + cve["CVE-ID"])      

def analyze_cves(experiment):
    example_file = 'example.txt'
    database_name = 'database-openai-'+str(experiment)
    source_file = 'bacnet_cve.csv'
    token = "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"
    database = {"cves":[]}
    cves_info = open_cve_list(source_file)
    execution_times = []
    for i, cve in cves_info.iterrows():
        cve_st = time.time()
        cve_prompt = load_prompt_text(example_file, cve["CVE-ID"],cve["DESCRIPTION"]) 
        analyze_cve(token, cve_prompt, cve, database, database_name, 0)
        cve_et = time.time()
        elapsed_time = cve_et - cve_st
        execution_times.append({"CVE_ID":cve["CVE-ID"], "Time":elapsed_time})
        save_result(execution_times, database_name + "-execution-time")

analyze_cves(1)
analyze_cves(2)
analyze_cves(3)
analyze_cves(4)
analyze_cves(5)
analyze_cves(6)