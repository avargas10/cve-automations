
import openai
import json
import pandas as pd
import numpy as np
import time
import glob
import pymongo
import os
from datetime import datetime

def open_database(source):
    with open(source, 'r') as f:
        data = json.load(f)
        return data

def analyzeDetectedModules(cves):
    cve_modules_detected = 0
    total_cves = len(cves)
    cves_modules_len = []
    for cve in cves:
        cve_id = cve["CVE_ID"]
        vulnerable_versions = cve["vulnerable_versions"]
        modules_len = len(vulnerable_versions)
        analytic_modules_len = {"CVE-ID": cve_id, "modules_len":modules_len}
        cves_modules_len.append(analytic_modules_len)
        if modules_len > 0:
            cve_modules_detected = cve_modules_detected + 1
    print("Total CVES: " ,total_cves)
    print("Detected CVES: " ,cve_modules_detected)
    return total_cves, cve_modules_detected, cves_modules_len

def analyze(db):
    print(db)
    database = open_database(db)
    total, detected_modules, cves_modules_len = analyzeDetectedModules(database["cves"])
    return total, detected_modules, cves_modules_len

def searchCVEData(cve_id, cve_list):
    for cve in cve_list:
        if cve["CVE-ID"] == cve_id:
            return cve   

def compareModels(model1, model2):
    _, _, data_model1 = analyze(model1)
    _, _, data_model2 = analyze(model2)
    total_compares = 0
    matching_compares = []
    model2_more = []
    model1_more = []
    for cve in data_model2:
        cve_data_model1 = searchCVEData(cve["CVE-ID"], data_model1)
        if cve_data_model1:
            if (cve_data_model1["modules_len"] == cve["modules_len"]):
                matching_compares.append(cve["CVE-ID"])
            elif (cve_data_model1["modules_len"] < cve["modules_len"]):
                model2_more.append(cve["CVE-ID"])
            elif (cve_data_model1["modules_len"] > cve["modules_len"]):
                model1_more.append(cve["CVE-ID"])
        total_compares = total_compares + 1
    print("total_compares ",total_compares)
    print("matching_compares ",len(matching_compares))
    print("model1_more ",len(model1_more))
    print("model1 cves ",model1_more)
    print("model2_more ",len(model2_more))
    print("model2 cves ",model2_more)
    return total_compares, matching_compares, model2_more, model1_more



def time_to_csv(file, execution_id, generator):
    df = pd.read_json(file)
    df['Execution'] = execution_id
    df['Analyzer'] = generator
    return df
    

def getExperimentData(results_csv, generator):
    time_res = pd.DataFrame()
    cve_lenght = getCVELenth()
    for experiment_number in range(1, 7):
        tempDf = time_to_csv("results/time_results/" + results_csv + "-" + str(experiment_number) + "-execution-time.json",experiment_number, generator)
        time_res = pd.concat([time_res, tempDf])
    time_res = pd.merge(time_res, cve_lenght, how='left', left_on='CVE_ID', right_on='CVE_ID')
    print(time_res)
    return time_res

def function(json_object, cve_id):
    for dict in json_object:
        if dict['CVE-ID'] == cve_id:
            return dict['Lenght'] 


def getExperimentCSV(experiment):
    openai = getExperimentData('database-openai', "OPENAI")
    heuristic = getExperimentData('database-heuristic-bacnet', "HEURISTIC")
    overall = pd.concat([openai, heuristic])
    os.makedirs('results/time_results/overall', exist_ok=True)  
    overall.to_csv('results/time_results/overall/' + experiment + '.csv')

def getCVELenth():
    lenght_res = pd.DataFrame(columns=['CVE_ID','Lenght'])
    source_file = 'bacnet_cve.csv'
    cves_info = pd.read_csv(source_file)
    for index, cve in cves_info.iterrows():
        cve_lenght = {"CVE_ID": cve["CVE-ID"], "Lenght": len(cve["DESCRIPTION"])}
        lenght_res.loc[len(lenght_res)] = cve_lenght
    return lenght_res

def uploadDatabase(databaseName, databaseFile):
    myclient = pymongo.MongoClient("mongodb+srv://afelipevargasr:9TC5hlN9CdC3czP6@cluster0.lrohl7y.mongodb.net/?retryWrites=true&w=majority")
    mydb = myclient["cve_simplifications"]
    mycol = mydb[databaseName]
    cve_list = open_database(databaseFile)
    cve_list = cve_list["cves"]
    for item in cve_list:
        print(item["CVE_ID"])
        x = mycol.insert_one(item)

def getMatchingCVES(model, databaseName):
    myclient = pymongo.MongoClient("mongodb+srv://afelipevargasr:9TC5hlN9CdC3czP6@cluster0.lrohl7y.mongodb.net/?retryWrites=true&w=majority")
    mydb = myclient["cve_simplifications"]
    mycol = mydb[databaseName]
    
    
def uploadAllDatabases():
    for experiment_number in range(2, 3):
        #uploadDatabase('database-heuristic-' + str(experiment_number),'results/database_results/execution-4/database-heuristic-bacnet-' + str(experiment_number) + '.json')
        uploadDatabase('database-openai-' + str(experiment_number),'results/database_results/execution-4/database-openai-' + str(experiment_number) + '.json')

# uploadAllDatabases() 
# getExperimentCSV('test-01')
# openai = getExperimentData('database-openai', "OPENAI")
# compareModels(
#     'results/database_results/experiment-01/database-openai-2.json', 
#     'results/database_results/experiment-01/database-heuristic-bacnet-4.json'
#     )


def compareMultipleDatabases(path, database1, database2,experimentName):
    comparisonResults = pd.DataFrame(columns=['db1',
                                              'db2',
                                              'total_compares',
                                              'matching_compares',
                                              "compare_rate",
                                              'db1_more_len',
                                              'db2_more_len',
                                              'db1_more',
                                              'db2_more'])
    for index1 in range(1, database1["limit"] + 1): 
        db1Url = path + "/" + database1["name"] + "-" + str(index1) + ".json"
        for index2 in range(1, database2["limit"] + 1):  
            db2Url = path + "/" + database2["name"] + "-" + str(index2) + ".json"           
            total, matching, db1_more, db2_more = compareModels(db1Url, db2Url)
            compareRes = {
                "db1": database1["name"] + "-" + str(index1),
                "db2": database2["name"] + "-" + str(index2),
                "total_compares": total,
                "matching_compares": len(matching),
                "compare_rate": len(matching) * 100 / total,
                "db1_more_len": len(db1_more),
                "db2_more_len": len(db2_more),
                "db1_more": db1_more,
                "db2_more": db2_more}
            comparisonResults.loc[len(comparisonResults)] = compareRes
    comparisonResults.to_csv(experimentName + ".csv")
            


humanDB = {"name": "database-human", "limit": 1}
openaiDB = {"name": "database-openai", "limit": 6}
heuristicDB = {"name": "database-heuristic-bacnet", "limit": 6}
compareMultipleDatabases("results/database_results/experiment-01", humanDB, openaiDB,"humanDB-openaiDB")
compareMultipleDatabases("results/database_results/experiment-01", heuristicDB, openaiDB,"heuristicDB-openaiDB")
compareMultipleDatabases("results/database_results/experiment-01", humanDB, heuristicDB,"humanDB-heuristicDB")
