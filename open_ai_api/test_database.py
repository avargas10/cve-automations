
import openai
import json
import pandas as pd
import numpy as np
import time
import traceback
import glob
import pymongo
import os
from datetime import datetime

def open_database(source):
    print(source)
    with open(source, 'r') as f:
        data = json.load(f)
        return data

def analyzeDetectedModules(cves):
    cve_modules_detected = 0
    total_cves = len(cves)
    cves_modules_len = []
    no_modules_cves = []
    for cve in cves:
        cve_id = cve["CVE_ID"]
        vulnerable_versions = cve["vulnerable_versions"]
        modules_len = 0
        if vulnerable_versions:
            modules_len = len(vulnerable_versions)
        analytic_modules_len = {"CVE-ID": cve_id, "modules_len":modules_len}
        cves_modules_len.append(analytic_modules_len)
        if modules_len > 0:
            cve_modules_detected = cve_modules_detected + 1
        else:
            no_modules_cves.append(cve["CVE_ID"])
    print("Total CVES: " ,total_cves)
    print("Detected CVES: " ,cve_modules_detected)
    return total_cves, cve_modules_detected, cves_modules_len, no_modules_cves

def analyze(db):
    database = open_database(db)
    return analyzeDetectedModules(database["cves"])

def searchCVEData(cve_id, cve_list, key):
    for cve in cve_list:
        if cve[key] == cve_id:
            return cve   


def save_result(json_string,cve_id): 
    with open(cve_id+'.json', 'w') as f:
        json.dump(json_string, f, indent=None)

def open_cve_list(source):
    cve_information = pd.read_csv(source, index_col=False)
    return cve_information

def searchCVEDataDict(cve_id, cve_list):
    for i, cve in cve_list.iterrows():
        if cve["CVE-ID"] == cve_id:
            return cve
        
def generateModelsSummary(base_db, target_db, base_db_time, target_db_time, base_name, target_name):
    base_db_dict = open_database(base_db)
    target_db_dict = open_database(target_db)
    base_db_time = open_database(base_db_time)
    target_db_time = open_database(target_db_time)
    _, _, data_base_db, base_no_modules_cves = analyze(base_db)
    _, _, data_target_db,target_no_modules_cves = analyze(target_db)
    source_file = '2022_2023_cve.csv'
    result = pd.DataFrame(columns=[    "CVE-ID",
                                                        "DESCRIPTION-LENGHT",
                                                        "MODULES-LENGHT",
                                                        "TIME",
                                                        "DATABASE"
                                              ])
    cves_info = open_cve_list(source_file)
    for cve in data_target_db:
        try:
            cve_base_time = searchCVEData(cve["CVE-ID"], base_db_time,"CVE_ID")
            cve_target_time = searchCVEData(cve["CVE-ID"], target_db_time,"CVE_ID")
            cve_base_dict = searchCVEData(cve["CVE-ID"], base_db_dict["cves"],"CVE_ID")
            cve_target_dict = searchCVEData(cve["CVE-ID"], target_db_dict["cves"],"CVE_ID")
            cve_dict = searchCVEDataDict(cve["CVE-ID"], cves_info)
            lenDescription = len(cve_dict["DESCRIPTION"])
            lenModulesTarget = 0
            if cve_target_dict["vulnerable_versions"]:
                lenModulesTarget = len(cve_target_dict["vulnerable_versions"])
            lenModulesBase = 0
            if cve_base_dict["vulnerable_versions"]:
                lenModulesBase = len(cve_base_dict["vulnerable_versions"])
            time_target = 0
            if cve_target_time:
                time_target = cve_target_time["Time"]
            base_time = 0
            if cve_base_time:
                base_time = cve_base_time["Time"]
            responseTarget = {
                "CVE-ID": cve["CVE-ID"],
                "DESCRIPTION-LENGHT": lenDescription,
                "MODULES-LENGHT": lenModulesTarget,
                "TIME": time_target,
                "DATABASE": target_name
            }
            responseBase = {
                "CVE-ID": cve["CVE-ID"],
                "DESCRIPTION-LENGHT": lenDescription,
                "MODULES-LENGHT": lenModulesBase,
                "TIME": base_time,
                "DATABASE": base_name
            }
            result.loc[len(result)] = responseTarget
            result.loc[len(result)] = responseBase
            result.to_csv(base_name + "-" + target_name + ".csv")
        except Exception as error:
            print(traceback.format_exc())
            print('An exception occurred: {}'.format(error))
            print("Error on cve ", cve["CVE-ID"])
        
        
def compareModels(base_db, target_db):
    base_db_dict = open_database(base_db)
    target_db_dict = open_database(target_db)
    _, _, data_base_db, base_no_modules_cves = analyze(base_db)
    _, _, data_target_db,target_no_modules_cves = analyze(target_db)
    total_compares = 0
    matching_compares = []
    target_db_more = []
    base_db_more = []
    common_cves_dict = []
    for cve in data_target_db:
        cve_data_base_db = searchCVEData(cve["CVE-ID"], data_base_db,"CVE-ID")
        if cve_data_base_db:
            cve_dict = searchCVEData(cve["CVE-ID"], base_db_dict["cves"],"CVE_ID")
            common_cves_dict.append(cve_dict)
            if (cve_data_base_db["modules_len"] == cve["modules_len"]):
                matching_compares.append(cve["CVE-ID"])
            elif (cve_data_base_db["modules_len"] < cve["modules_len"]):
                target_db_more.append(cve["CVE-ID"])
            elif (cve_data_base_db["modules_len"] > cve["modules_len"]):
                base_db_more.append(cve["CVE-ID"])
        else:
            print("Not found ", cve["CVE-ID"])
        total_compares = total_compares + 1
    cves_res = {
        "matching_compares": matching_compares, 
        "base_no_modules_cves": base_no_modules_cves,
        "target_no_modules_cves": target_no_modules_cves,
        "target_db_more": target_db_more,
        "base_db_more": base_db_more
        }
    print("total_compares ",total_compares)
    print("common_cves ",len(common_cves_dict))
    print("matching_compares ",len(matching_compares))
    print("base_db_more ",len(base_db_more))
    # print("base_db cves ",base_db_more)
    print("target_db_more ",len(target_db_more))
    # print("target_db cves ",target_db_more)
    base_db_dict["cves"] = common_cves_dict
    save_result(cves_res,"cves_res")
    return total_compares, matching_compares, target_db_more, base_db_more



def time_to_csv(file, execution_id, generator):
    df = pd.read_json(file)
    df['Execution'] = execution_id
    df['Analyzer'] = generator
    return df
    

def getExperimentData(results_csv, generator):
    time_res = pd.DataFrame()
    cve_lenght = getCVELenth()
    for experiment_number in range(1, 7):
        tempDf = time_to_csv("results/time_results/" + results_csv + "-" + str(experiment_number) + "-execution-time.json",experiment_number, generator)
        time_res = pd.concat([time_res, tempDf])
    time_res = pd.merge(time_res, cve_lenght, how='left', left_on='CVE_ID', right_on='CVE_ID')
    print(time_res)
    return time_res

def function(json_object, cve_id):
    for dict in json_object:
        if dict['CVE-ID'] == cve_id:
            return dict['Lenght'] 


def getExperimentCSV(experiment):
    openai = getExperimentData('database-openai', "OPENAI")
    heuristic = getExperimentData('database-heuristic-bacnet', "HEURISTIC")
    overall = pd.concat([openai, heuristic])
    os.makedirs('results/time_results/overall', exist_ok=True)  
    overall.to_csv('results/time_results/overall/' + experiment + '.csv')

def getCVELenth():
    lenght_res = pd.DataFrame(columns=['CVE_ID','Lenght'])
    source_file = 'bacnet_cve.csv'
    cves_info = pd.read_csv(source_file)
    for index, cve in cves_info.iterrows():
        cve_lenght = {"CVE_ID": cve["CVE-ID"], "Lenght": len(cve["DESCRIPTION"])}
        lenght_res.loc[len(lenght_res)] = cve_lenght
    return lenght_res

def uploadDatabase(databaseName, databaseFile, limit):
    myclient = pymongo.MongoClient("mongodb+srv://afelipevargasr:9TC5hlN9CdC3czP6@cluster0.lrohl7y.mongodb.net/?retryWrites=true&w=majority")
    mydb = myclient["cve_simplifications"]
    mycol = mydb[databaseName]
    cve_list = open_database(databaseFile)
    cve_list = cve_list["cves"]
    len_list = len(cve_list)
    print("len_list ",len_list)
    counter = 0
    for item in cve_list:
        print("Counter ",counter)
        if counter >= limit:
            print(item["CVE_ID"])
            x = mycol.insert_one(item)
        counter = counter + 1

def getMatchingCVES(model, databaseName):
    myclient = pymongo.MongoClient("mongodb+srv://afelipevargasr:9TC5hlN9CdC3czP6@cluster0.lrohl7y.mongodb.net/?retryWrites=true&w=majority")
    mydb = myclient["cve_simplifications"]
    mycol = mydb[databaseName]
    
    
def uploadAllDatabases():
    for experiment_number in range(2, 3):
        #uploadDatabase('database-heuristic-' + str(experiment_number),'results/database_results/execution-4/database-heuristic-bacnet-' + str(experiment_number) + '.json')
        uploadDatabase('database-openai-' + str(experiment_number),'results/database_results/execution-4/database-openai-' + str(experiment_number) + '.json')

# uploadAllDatabases() 



# getExperimentCSV('test-01')
# openai = getExperimentData('database-openai', "OPENAI")
# compareModels(
#     'results/database_results/experiment-01/database-openai-2.json', 
#     'results/database_results/experiment-01/database-heuristic-bacnet-4.json'
#     )


def compareMultipleDatabases(path, database1, database2,experimentName):
    comparisonResults = pd.DataFrame(columns=['db1',
                                              'db2',
                                              'total_compares',
                                              'matching_compares',
                                              "compare_rate",
                                              'db1_more_len',
                                              'db2_more_len',
                                              'db1_more',
                                              'db2_more'])
    for index1 in range(1, database1["limit"] + 1): 
        db1Url = path + "/" + database1["name"] + "-" + str(index1) + ".json"
        for index2 in range(1, database2["limit"] + 1):  
            db2Url = path + "/" + database2["name"] + "-" + str(index2) + ".json"           
            total, matching, db1_more, db2_more = compareModels(db1Url, db2Url)
            compareRes = {
                "db1": database1["name"] + "-" + str(index1),
                "db2": database2["name"] + "-" + str(index2),
                "total_compares": total,
                "matching_compares": len(matching),
                "compare_rate": len(matching) * 100 / total,
                "db1_more_len": len(db1_more),
                "db2_more_len": len(db2_more),
                "db1_more": db1_more,
                "db2_more": db2_more}
            comparisonResults.loc[len(comparisonResults)] = compareRes
    comparisonResults.to_csv(experimentName + ".csv")
            


# humanDB = {"name": "database-human", "limit": 1}
# openaiDB = {"name": "database-openai", "limit": 6}
# heuristicDB = {"name": "database-heuristic-bacnet", "limit": 6}
# compareMultipleDatabases("results/database_results/experiment-01", humanDB, openaiDB,"humanDB-openaiDB")
# compareMultipleDatabases("results/database_results/experiment-01", heuristicDB, openaiDB,"heuristicDB-openaiDB")
# compareMultipleDatabases("results/database_results/experiment-01", humanDB, heuristicDB,"humanDB-heuristicDB")

# uploadDatabase('database-2022-cve','results/database_results/experiment-01/database-2022-cve.json',2633)


# compareModels("results/database_results/experiment-01/database-heuristic-2022-no-empty.json","results/database_results/experiment-01/database-openai-2022.json")
generateModelsSummary(
    "results/database_results/experiment-01/database-heuristic-2022-no-empty.json",
    "results/database_results/experiment-01/database-openai-2022.json",
    "results/database-heuristic-2022-1-execution-time.json",
    "results/database-openai-time.json",
    "HEURISTIC",
    "OPENAI")