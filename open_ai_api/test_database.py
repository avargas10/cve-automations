
import openai
import json
import pandas as pd
import numpy as np
import time
from datetime import datetime

def open_database(source):
    with open(source, 'r') as f:
        data = json.load(f)
        return data

def analyzeDetectedModules(cves):
    cve_modules_detected = 0
    total_cves = len(cves)
    cves_modules_len = []
    for cve in cves:
        cve_id = cve["CVE_ID"]
        vulnerable_versions = cve["vulnerable_versions"]
        modules_len = len(vulnerable_versions)
        analytic_modules_len = {"CVE-ID": cve_id, "modules_len":modules_len}
        cves_modules_len.append(analytic_modules_len)
        if modules_len > 0:
            cve_modules_detected = cve_modules_detected + 1
    print("Total CVES: " ,total_cves)
    print("Detected CVES: " ,cve_modules_detected)
    return total_cves, cve_modules_detected, cves_modules_len

def analyze(db):
    database = open_database(db)
    total, detected_modules, cves_modules_len = analyzeDetectedModules(database["cves"])
    return total, detected_modules, cves_modules_len

def searchCVEData(cve_id, cve_list):
    for cve in cve_list:
        if cve["CVE-ID"] == cve_id:
            return cve   

def compareModels():
    _, _, data_openai = analyze('database.json')
    _, _, data_heuristic = analyze('database-heuristic-bacnet.json')
    total_compares = 0
    matching_compares = []
    heuristic_more = []
    openai_more = []
    for cve in data_heuristic:
        cve_data_openai = searchCVEData(cve["CVE-ID"], data_openai)
        if cve_data_openai:
            if (cve_data_openai["modules_len"] == cve["modules_len"]):
                matching_compares.append(cve["CVE-ID"])
            elif (cve_data_openai["modules_len"] < cve["modules_len"]):
                heuristic_more.append(cve["CVE-ID"])
            elif (cve_data_openai["modules_len"] > cve["modules_len"]):
                openai_more.append(cve["CVE-ID"])
        total_compares = total_compares + 1
    print("total_compares ",total_compares)
    print("matching_compares ",len(matching_compares))
    print("heuristic_more ",len(heuristic_more))
    print("openai_more ",len(openai_more))
    return total_compares, matching_compares, heuristic_more, openai_more

print(compareModels())