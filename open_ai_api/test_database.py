
import openai
import json
import pandas as pd
import numpy as np
import time
import os
from datetime import datetime

def open_database(source):
    with open(source, 'r') as f:
        data = json.load(f)
        return data

def analyzeDetectedModules(cves):
    cve_modules_detected = 0
    total_cves = len(cves)
    cves_modules_len = []
    for cve in cves:
        cve_id = cve["CVE_ID"]
        vulnerable_versions = cve["vulnerable_versions"]
        modules_len = len(vulnerable_versions)
        analytic_modules_len = {"CVE-ID": cve_id, "modules_len":modules_len}
        cves_modules_len.append(analytic_modules_len)
        if modules_len > 0:
            cve_modules_detected = cve_modules_detected + 1
    print("Total CVES: " ,total_cves)
    print("Detected CVES: " ,cve_modules_detected)
    return total_cves, cve_modules_detected, cves_modules_len

def analyze(db):
    database = open_database(db)
    total, detected_modules, cves_modules_len = analyzeDetectedModules(database["cves"])
    return total, detected_modules, cves_modules_len

def searchCVEData(cve_id, cve_list):
    for cve in cve_list:
        if cve["CVE-ID"] == cve_id:
            return cve   

def compareModels():
    _, _, data_openai = analyze('database.json')
    _, _, data_heuristic = analyze('database-heuristic-bacnet.json')
    total_compares = 0
    matching_compares = []
    heuristic_more = []
    openai_more = []
    for cve in data_heuristic:
        cve_data_openai = searchCVEData(cve["CVE-ID"], data_openai)
        if cve_data_openai:
            if (cve_data_openai["modules_len"] == cve["modules_len"]):
                matching_compares.append(cve["CVE-ID"])
            elif (cve_data_openai["modules_len"] < cve["modules_len"]):
                heuristic_more.append(cve["CVE-ID"])
            elif (cve_data_openai["modules_len"] > cve["modules_len"]):
                openai_more.append(cve["CVE-ID"])
        total_compares = total_compares + 1
    print("total_compares ",total_compares)
    print("matching_compares ",len(matching_compares))
    print("heuristic_more ",len(heuristic_more))
    print("openai_more ",len(openai_more))
    return total_compares, matching_compares, heuristic_more, openai_more

def time_to_csv(file, execution_id, generator):
    df = pd.read_json(file)
    df['Execution'] = execution_id
    df['Analyzer'] = generator
    return df
    

def getExperimentData(results_csv, generator):
    time_res = pd.DataFrame()
    cve_lenght = getCVELenth()
    for experiment_number in range(1, 7):
        tempDf = time_to_csv("results/time_results/" + results_csv + "-" + str(experiment_number) + "-execution-time.json",experiment_number, generator)
        time_res = pd.concat([time_res, tempDf])
    time_res = pd.merge(time_res, cve_lenght, how='left', left_on='CVE_ID', right_on='CVE_ID')
    print(time_res)
    return time_res

def function(json_object, cve_id):
    for dict in json_object:
        if dict['CVE-ID'] == cve_id:
            return dict['Lenght'] 


def getExperimentCSV(experiment):
    openai = getExperimentData('database-openai', "OPENAI")
    heuristic = getExperimentData('database-heuristic-bacnet', "HEURISTIC")
    overall = pd.concat([openai, heuristic])
    os.makedirs('results/time_results/overall', exist_ok=True)  
    overall.to_csv('results/time_results/overall/' + experiment + '.csv')

def getCVELenth():
    lenght_res = pd.DataFrame(columns=['CVE_ID','Lenght'])
    source_file = 'bacnet_cve.csv'
    cves_info = pd.read_csv(source_file)
    for index, cve in cves_info.iterrows():
        cve_lenght = {"CVE_ID": cve["CVE-ID"], "Lenght": len(cve["DESCRIPTION"])}
        lenght_res.loc[len(lenght_res)] = cve_lenght
    return lenght_res

getExperimentCSV('test-01')
# openai = getExperimentData('database-openai', "OPENAI")